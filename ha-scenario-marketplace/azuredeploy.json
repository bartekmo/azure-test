{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters" : {
		"firewallVmName": {
			"type": "string",
			"defaultValue": "BarracudaNGF",
			"metadata": {
				"description": "Name of the primary firewall VM ('-ha' is added for form name of secondary)"
			}
		},
		"dnsNameForPublicIP" : {
			"type" : "string",
			"metadata": {
				"description": "Unique DNS Name for the Public IP used to access the deployment"
			}
		},
		"virtualNetworkName": {
			"type": "string",
			"defaultValue" : "myVNet",
			"metadata": {
				"description": "Name of Virtual Network to create"
			}
		},
		"vnetAddressSpace": {
			"type": "string",
			"defaultValue": "10.0.0.0/16",
			"metadata": {
				"description": "VNET address prefix in CIDR format. Minimum size is /22"
			}
		},
		"location": {
			"type": "string",
			"allowedValues": ["North Europe", "West Europe", "Central US", "Sourth Central US", "East US", "West US", "North Central US", "East US 2", "East Asia", "Southeast Asia", "Japan East", "Japan West", "Brasil South" ],
			"defaultValue": "West Europe",
			"metadata" : {
				"description" : "Location to deploy"
			}

		},
		"instanceSize": {
			"type": "string",
			"allowedValues" : ["Small", "Medium", "Standard_D1", "Standard_D2", "Standard_D3" ],
			"defaultValue" : "Standard_D1",
			"metadata": {
				"description": "The size of your firewall VMs"
			}
		},
		"adminPassword": {
			"type": "securestring",
			"metadata": {
			  "description": "Administrative password for root account"
			}
		}
	},
	"variables": {
		"imagePublisher": "barracudanetworks",
		"imageOffer": "barracuda-ng-firewall",
		"imageSku": "byol",
		"newStorageAccountName" : "[concat('ngstorage', replace(resourceGroup().name, '-', ''))]",
		"vmStorageAccountContainerName" : "vhds",
		"storageAccountType" : "Standard_LRS",
		"publicIPAddressName": "[concat( 'ngfIP-', replace(resourceGroup().name, '-', ''))]",
		"nicName": "[concat( 'ngfNIC-', replace(resourceGroup().name, '-', ''))]",
		"publicIPAddressType" : "Dynamic",
		"adminUsername" : "will_be_replaced_by_root",
		"osType" : "linux",
		"numberOfInstances" : 2,
		"lbName" : "[concat( 'ngfLB-', replace( resourceGroup().name, '-', '' ))]",
		"availabilitySetName" : "[concat( 'ngfHASet-', replace( resourceGroup().name, '-', '' ))]",
		"vnetID":"[resourceId('Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
		"lbID" : "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
		"subnet1Ref" : "[concat(variables('vnetID'),'/subnets/',variables('subnetGatewayName'))]",
		"publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
		"frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/LoadBalancerFrontEnd')]",
		"lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/BackendPool1')]",
		"lbSSLProbeID": "[concat(variables('lbID'),'/probes/tcpSSLProbe')]",
		"lbVPNProbeID": "[concat(variables('lbID'),'/probes/tcpVPNProbe')]",
		"routeTableName": "[concat('default-via-', replace(parameters('firewallVmName'), '-', ''))]",
		"vnetAddressSpaceSplit" : "[split( parameters( 'vnetAddressSpace' ), '.' )]",
		"vnetTwoOctets" : "[concat( variables('vnetAddressSpaceSplit')[0], '.', variables('vnetAddressSpaceSplit')[1] )]",
		"subnetGatewayName" : "FirewalSubnet",
		"subnetGatewayAddress" : "[concat(variables('vnetTwoOctets'), '.', variables('vnetAddressSpaceSplit')[2], '.0/28')]",
		"subnetTier1Address" : "[concat(variables('vnetTwoOctets'), '.', add( int( variables('vnetAddressSpaceSplit')[2]), 1 ), '.0/24')]",
		"subnetTier2Address" : "[concat(variables('vnetTwoOctets'), '.', add( int( variables('vnetAddressSpaceSplit')[2]), 2 ), '.0/24')]",
		"subnetTier3Address" : "[concat(variables('vnetTwoOctets'), '.', add( int( variables('vnetAddressSpaceSplit')[2]), 3 ), '.0/24')]",
		"ngboxPrimaryIP" : "[concat(variables('vnetTwoOctets'), '.', variables('vnetAddressSpaceSplit')[2], '.4' )]",
		"ngboxSecondaryIP" : "[concat(variables('vnetTwoOctets'), '.', variables('vnetAddressSpaceSplit')[2], '.5' )]",
		"apiVer": "2015-06-15"
	},
	"resources": [
	{
		"type": "Microsoft.Storage/storageAccounts",
		"name": "[variables('newStorageAccountName')]",
		"apiVersion": "2015-05-01-preview",
		"location": "[parameters('location')]",
		"properties": {
			"accountType": "[variables('storageAccountType')]"
		}
	},
	{
		"apiVersion": "2015-05-01-preview",
		"type": "Microsoft.Compute/availabilitySets",
		"name": "[variables('availabilitySetName')]",
		"location": "[parameters('location')]",
		"properties" : {}
	},
	{
		"apiVersion": "2015-05-01-preview",
		"type": "Microsoft.Network/publicIPAddresses",
		"name": "[variables('publicIPAddressName')]",
		"location": "[parameters('location')]",
		"properties": {
			"publicIPAllocationMethod": "[variables('publicIPAddressType')]",
			"dnsSettings": {
				"domainNameLabel": "[parameters('dnsNameForPublicIP')]"
			}
		}
	},
	{
        	"type": "Microsoft.Network/routeTables",
        	"name": "[variables('routeTableName')]",
        	"apiVersion": "[variables( 'apiVer' )]",
        	"location": "[parameters('location')]",
        	"properties": {
            	"routes": [{
	                "name": "defaultRouteViaNG",
                	"properties": {
                    	"addressPrefix": "0.0.0.0/0",
                    	"nextHopType": "VirtualAppliance",
                    	"nextHopIpAddress": "[variables('ngboxPrimaryIP')]"
                	}
            	}]
        	}
    	},
	
	{
	  "apiVersion": "[variables( 'apiVer' )]",
	  "type": "Microsoft.Network/virtualNetworks",
	  "name": "[parameters('virtualNetworkName')]",
	  "location": "[parameters('location')]",
	  "dependsOn": [ "[concat('Microsoft.Network/routeTables/', variables('routeTableName'))]" ],
	  "properties": {
		"addressSpace": {
		  "addressPrefixes": [
			"[parameters('vnetAddressSpace')]"
		  ]
		},
		"subnets": [
		{
			"name": "[variables( 'subnetGatewayName' )]",
			"properties" : {
				"addressPrefix": "[variables( 'subnetGatewayAddress' )]"
			}
		},
		{
		  	"name": "Subnet-Tier1",
		  	"properties" : {
		  		"addressPrefix": "[variables( 'subnetTier1Address' )]",
				"routeTable": {
                        		"id": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]"
                    			}
		  	}
		},
		{
		  	"name": "Subnet-Tier2",
		  	"properties" : {
		  		"addressPrefix": "[variables( 'subnetTier2Address' )]",
				"routeTable": {
                        		"id": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]"
                    			}
		  	}
		},
		{
		  	"name": "Subnet-Tier3",
		  	"properties" : {
		  		"addressPrefix": "[variables( 'subnetTier3Address' )]",
				"routeTable": {
                        		"id": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]"
                    			}
		  	}
		}
		]
	  }
	},
	{
		"apiVersion": "2015-05-01-preview",
		"type": "Microsoft.Network/networkInterfaces",
		"name": "[variables('nicName')]",
		"location": "[parameters('location')]",
		"dependsOn": [
			"[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]",
			"[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
		],
		"properties": {
			"ipConfigurations": [
			{
				"name": "ipconfig1",
				"properties": {
					"enableIPForwarding": true,
					"privateIPAllocationMethod": "Static",
					"privateIPAddress" : "[variables('ngboxPrimaryIP')]",
					"subnet": {
						"id": "[variables('subnet1Ref')]"
					},
					"loadBalancerBackendAddressPools" : [{
						"id" : "[concat(variables('lbID'), '/backendAddressPools/BackendPool1')]"
					}],
					"loadBalancerInboundNatRules":[
					{
						"id" : "[concat(variables('lbID'),'/inboundNatRules/SSH-VM')]"
					},
					{
						"id" : "[concat(variables('lbID'),'/inboundNatRules/MGMT-VM')]"
					}
					]
				}
			}
			]
		}
	},
	{
		"apiVersion": "2015-05-01-preview",
		"type": "Microsoft.Network/networkInterfaces",
		"name": "[concat(variables('nicName'),'ha')]",
		"location": "[parameters('location')]",
		"dependsOn": [
			"[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]",
			"[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
		],
		"properties": {
			"ipConfigurations": [
			{
				"name": "ipconfig2",
				"properties": {
					"enableIPForwarding": true,
					"privateIPAllocationMethod": "Static",
					"privateIPAddress" : "[variables('ngboxSecondaryIP')]",
					"subnet": {
						"id": "[variables('subnet1Ref')]"
					},
					"loadBalancerBackendAddressPools" : [{
						"id" : "[concat(variables('lbID'), '/backendAddressPools/BackendPool1')]"
					}],
					"loadBalancerInboundNatRules" : []
				}
			}
			]
		}
	},
	{
		"apiVersion": "2015-05-01-preview",
		"type": "Microsoft.Network/loadBalancers",
		"name": "[variables('lbName')]",
		"location": "[parameters('location')]",
		"dependsOn": [
			"[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
		],
		"properties" : {
			"frontendIPConfigurations": [{
				"name": "LoadBalancerFrontEnd",
				"properties" : {
					"publicIPAddress" : {
						"id": "[variables('publicIPAddressID')]"
					}
				}
			}],
			"backendAddressPools" : [{
				"name": "BackendPool1"
			}],
			"inboundNatRules" : [
			{
				"name" : "SSH-VM",
				"properties" : {
					"frontendIPConfiguration" : {
						"id": "[variables('frontEndIPConfigID')]"
					},
					"protocol" : "tcp",
					"frontendPort" : 22,
					"backendPort" : 22,
					"enableFloatingIP" : false
				}
			},
			{
				"name" : "MGMT-VM",
				"properties" : {
					"frontendIPConfiguration" : {
						"id": "[variables('frontEndIPConfigID')]"
					},
					"protocol" : "tcp",
					"frontendPort" : 807,
					"backendPort" : 807,
					"enableFloatingIP" : false
				}
			}
			],
			"loadBalancingRules" : [
			{
				"name" : "LBRuleSSL",
				"properties" : {
					"frontendIPConfiguration": {
						"id": "[variables('frontEndIPConfigID')]"
					},
					"backendAddressPool": {
						"id": "[variables('lbPoolID')]"
					},
					"protocol": "tcp",
					"frontendPort": 443,
					"backendPort": 443,
					"enableFloatingIP": false,
					"idleTimeoutInMinutes": 5,
					"probe" : {
						"id": "[variables('lbSSLProbeID')]"
					}
				}
			},
			{
				"name" : "LBRuleVPN",
				"properties" : {
					"frontendIPConfiguration": {
						"id": "[variables('frontEndIPConfigID')]"
					},
					"backendAddressPool": {
						"id": "[variables('lbPoolID')]"
					},
					"protocol": "tcp",
					"frontendPort": 691,
					"backendPort": 691,
					"enableFloatingIP": false,
					"idleTimeoutInMinutes": 5,
					"probe" : {
						"id": "[variables('lbVPNProbeID')]"
					}
				}
			},
			{
				"name" : "LBRuleVPNUDP",
				"properties" : {
					"frontendIPConfiguration": {
						"id": "[variables('frontEndIPConfigID')]"
					},
					"backendAddressPool": {
						"id": "[variables('lbPoolID')]"
					},
					"protocol": "udp",
					"frontendPort": 691,
					"backendPort": 691,
					"enableFloatingIP": false,
					"idleTimeoutInMinutes": 5,
					"probe" : {
						"id": "[variables('lbVPNProbeID')]"
					}
				}
			}
			],
			"probes" : [
			{
				"name" : "tcpSSLProbe",
				"properties" : {
					"protocol": "tcp",
					"port": 443,
					"intervalinseconds": "5",
					"numberofprobes": "2"
				}
			},
			{
				"name" : "tcpVPNProbe",
				"properties" : {
					"protocol": "tcp",
					"port": 691,
					"intervalinseconds": "5",
					"numberofprobes": "2"
				}
			}
			]
		}
	},
	{
		"apiVersion": "2015-05-01-preview",
		"type": "Microsoft.Compute/virtualMachines",
		"name": "[parameters('firewallVmName')]",
		"location": "[parameters('location')]",
		"dependsOn": [
			"[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
			"[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]",
			"[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
		],
		"plan": {
			 "name": "[variables('imageSku')]",
			 "Product": "[variables('imageOffer')]",
			 "Publisher": "[variables('imagePublisher')]"
		},
		"properties": {
			"availabilitySet" : {
				"id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
			},
			"hardwareProfile": {
				"vmSize": "[parameters('instanceSize')]"
			},
			"osProfile": {
				"computername": "[parameters('firewallVmName')]",
				"adminUsername": "[variables('adminUsername')]",
				"adminPassword": "[parameters('adminPassword')]",
				"customData" : "[base64(concat('{\"version\" : \"1.0\", \"dha\" : { \"flags\" : [\"primary\"], \"ip\" : \"', variables('ngboxPrimaryIP'), '\", \"haip\" : \"', variables('ngboxSecondaryIP'), '\", \"gateway\" : \"', variables('subnetGatewayAddress'), '\", \"password\" : \"', parameters('adminPassword'), '\" }}'))]"
			},
			"storageProfile": {
				"imageReference" : {
					"publisher": "[variables('imagePublisher')]",
					"offer": "[variables('imageOffer')]",
					"sku": "[variables('imageSku')]",
					"version": "latest"
				},
				"osDisk" : {
					"name" : "[concat(parameters('firewallVmName'),'-osDisk')]",
					"caching" : "ReadWrite",
					"createOption" : "FromImage",
					"vhd" : {
						"uri" : "[concat('https://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',parameters('firewallVmName'),'.vhd')]"
					}
				}
			},
			"networkProfile": {
				"networkInterfaces" : [
				{
					"id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
				}
				]
			}
		}
	},
	{
		"apiVersion": "2015-05-01-preview",
		"type": "Microsoft.Compute/virtualMachines",
		"name": "[concat(parameters('firewallVmName'),'-HA')]",
		"location": "[parameters('location')]",
		"dependsOn": [
			"[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
			"[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), 'ha')]",
			"[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
		],
		"plan": {
			 "name": "[variables('imageSku')]",
			 "Product": "[variables('imageOffer')]",
			 "Publisher": "[variables('imagePublisher')]"
		},
		"properties": {
			"availabilitySet" : {
				"id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
			},
			"hardwareProfile": {
				"vmSize": "[parameters('instanceSize')]"
			},
			"osProfile": {
				"computername": "[concat(parameters('firewallVmName'),'ha')]",
				"adminUsername": "[variables('adminUsername')]",
				"adminPassword": "[parameters('adminPassword')]",
				"customData" : "[base64(concat('{\"version\" : \"1.0\", \"dha\" : { \"haip\" : \"', variables('ngboxSecondaryIP'), '\", \"gateway\" : \"', variables('subnetGatewayAddress'), '\", \"password\" : \"', parameters('adminPassword'), '\" }}'))]"
			},
			"storageProfile": {
				"imageReference" : {
					"publisher": "[variables('imagePublisher')]",
					"offer": "[variables('imageOffer')]",
					"sku": "[variables('imageSku')]",
					"version": "latest"
				},
				"osDisk" : {
					"name" : "[concat(parameters('firewallVmName'),'-osDisk')]",
					"caching" : "ReadWrite",
					"createOption" : "FromImage",
					"vhd" : {
						"uri" : "[concat('https://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',parameters('firewallVmName'),'ha','.vhd')]"
					}
				}
			},
			"networkProfile": {
				"networkInterfaces" : [
				{
					"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'),'ha'))]"
				}
				]
			}
		}
	}
	]
}
